"use strict";(self.webpackChunkdocsite=self.webpackChunkdocsite||[]).push([[2482],{4414:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>h,contentTitle:()=>a,default:()=>m,frontMatter:()=>c,metadata:()=>d,toc:()=>l});var i=t(5893),s=t(1151),r=t(7294);const o=()=>{const[e,n]=(0,r.useState)(void 0),[t,s]=(0,r.useState)();return(0,r.useEffect)((()=>{(async()=>{try{const e=await fetch("https://raw.githubusercontent.com/microsoft/fluentui-charting-contrib/test-coverage-artifacts/bundle-size/monosize.json",{mode:"cors"});if(!e)throw new Error("Invalid response");const t=await e.json();n(t)}catch(e){s(e)}})()}),[]),t?(0,i.jsxs)("h3",{children:["Error: ",t.message]}):(0,i.jsx)(i.Fragment,{children:e?(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Name"}),(0,i.jsx)("th",{children:"MIN size"}),(0,i.jsx)("th",{children:"GZIP size"})]})}),(0,i.jsx)("tbody",{children:e.map(((e,n)=>(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:e.name}),(0,i.jsxs)("td",{children:[(e.minifiedSize/1024).toFixed(2)," KiB"]}),(0,i.jsxs)("td",{children:[(e.gzippedSize/1024).toFixed(2)," KiB"]})]},n)))})]}):(0,i.jsx)("h4",{children:"Loading..."})})},c={},a="Bundle Size",d={id:"BundleSize",title:"Bundle Size",description:"This table measures the maximum unpacked size of each chart control. This is measured by the monosize tool.",source:"@site/../../docs/BundleSize.md",sourceDirName:".",slug:"/BundleSize",permalink:"/fluentui-charting-contrib/docs/BundleSize",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Testing Unpublished Library Version",permalink:"/fluentui-charting-contrib/docs/Testing Unpublished Library Version"},next:{title:"RFC: Fix 2:1 spacing",permalink:"/fluentui-charting-contrib/docs/rfcs/fix-2-to-1-spacing"}},h={},l=[];function u(e){const n={a:"a",h1:"h1",p:"p",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"bundle-size",children:"Bundle Size"}),"\n",(0,i.jsxs)(n.p,{children:["This table measures the maximum unpacked size of each chart control. This is measured by the ",(0,i.jsx)(n.a,{href:"https://github.com/microsoft/monosize",children:"monosize tool"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Each chart is ",(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Glossary/Tree_shaking",children:"tree shakable"}),".\nThe actual size overhead for your application consuming the chart will depend on only the piece of functionality that you are importing.\nTo further improve the dependency size, consider turning on the mangle and code chunking options while bundling your package."]}),"\n","\n","\n",(0,i.jsx)(o,{})]})}function m(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>c,a:()=>o});var i=t(7294);const s={},r=i.createContext(s);function o(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);