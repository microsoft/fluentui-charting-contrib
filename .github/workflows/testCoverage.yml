name: 'Test coverage'
on:
  schedule:
    - cron: "0 0 * * *" 
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write
  
jobs:
  run_tests:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    outputs:
      test_coverage: ${{ steps.run_tests.outputs }}

    steps:   
      - name: Checkout [master]
        uses: actions/checkout@v4

      - name: Checkout [react-charting]
        uses: actions/checkout@v4
        with: 
          repository: "microsoft/fluentui"
          path: repo1

      - name: Show current directory
        run: echo "$PWD" && ls

      - name: Change function visibility from private to public
        id: setup
        uses: ./tools/UnitTestApp/ChangeFunctionVisibility
        with:
          osType: ${{ matrix.os }}

      - name: Install packages
        run:  yarn --cwd ./tools/UnitTestApp && yarn --cwd ./repo1 && yarn --cwd ./repo1/packages/react-charting

      - name: Build
        run:  yarn --cwd ./repo1 buildto @fluentui/react-charting

      - name: Run the tests in windows
        if: matrix.os == 'windows-latest'  
        run: cd ./repo1/packages/react-charting && powershell -Command "(Get-Content -Path ./config/tests.js) -replace 'PROD', 'TEST' | Set-Content -Path ./config/tests.js" && yarn jest --coverage --verbose --coverageReporters=html --coverageReporters=text > coverageReport.txt
        
      - name: Run the tests in macos
        if: matrix.os == 'macos-latest'
        run: cd ./repo1/packages/react-charting && sed -i '' 's/PROD/TEST/g' ./config/tests.js && yarn jest --coverage --verbose --coverageReporters=html --coverageReporters=text > coverageReport.txt
        
      - name: Run the tests in ubuntu
        if: matrix.os == 'ubuntu-latest'    
        run: cd ./repo1/packages/react-charting && sed -i 's/PROD/TEST/g' ./config/tests.js && yarn jest --coverage --verbose --coverageReporters=html --coverageReporters=text > coverageReport.txt        

      - name: Generate coverage file name in windows
        if: matrix.os == 'windows-latest'          
        run: |
            $NOW=& Get-Date -format yyyy-MM-dd_HH:mm:ss
            echo "COVERAGE_FILENAME=test_coverage_${{ matrix.os }}_$NOW" >> $env:GITHUB_ENV

      - name: Generate coverage file name
        run: |          
            echo "COVERAGE_FILENAME=test_coverage_${{ matrix.os }}_$(date +'%Y-%m-%d_%H-%M-%S')" >> $GITHUB_ENV

      - name: Save coverage folder
        uses: actions/upload-artifact@v4
        with:
          name: ${{env.COVERAGE_FILENAME}}
          path: ./repo1/packages/react-charting/coverage

      - name: Save coverage file
        uses: actions/upload-artifact@v4
        with:
          name: ${{env.COVERAGE_FILENAME}}_report
          path: ./repo1/packages/react-charting/coverageReport.txt

      - name: Extract the coverage summary table
        if: matrix.os != 'windows-latest'
        run: |
            cd ./repo1/packages/react-charting
            file_contents=$(cat coverageReport.txt)
            table=$(echo "$file_contents" | awk '/----/,/^$/' | sed '1d;$d')
            echo "$table"

      - name: Extract the coverage summary table in windows
        if: matrix.os == 'windows-latest'
        run: |
            cd ./repo1/packages/react-charting
            $fileContents = Get-Content -Raw -Path "coverageReport.txt"
            $tableRegex = "(?ms)----.*?^$"
            $table = [regex]::Match($fileContents, $tableRegex)
            echo "$table"

      - name: Setup Pages
        uses: actions/configure-pages@v4
        
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload entire repository
          path: './repo1/packages/react-charting/coverage'
          
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          artifact_name: deployment-${{ matrix.os }}-${{env.COVERAGE_FILENAME}}

      - name: Url after deployment
        run: echo "${{ steps.deployment.outputs.page_url }}"
