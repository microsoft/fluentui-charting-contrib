name: 'Test coverage'
on:
  schedule:
    - cron: "0 0 * * *" 
  workflow_dispatch:

jobs:
  run_tests:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    outputs:
      test_coverage: ${{ steps.run_tests.outputs }}

    steps:
      - name: Run the tests
        run: |
          if: ${{ matrix.os }} == 'windows-latest'
            echo "First if"
          elif [ ${{ matrix.os }} == 'macos-latest' ]; then
            echo "First else if"
          elif [ ${{ matrix.os }} == 'ubuntu-latest' ]; then
            echo "Second else if"
          fi
      
      # - name: Checkout [master]
      #   uses: actions/checkout@v4

      # - name: Checkout [react-charting]
      #   uses: actions/checkout@v4
      #   with: 
      #     repository: "microsoft/fluentui"
      #     path: repo1

      # - name: Show current directory
      #   run: echo "$PWD" && ls

      # - name: Change function visibility from private to public
      #   id: setup
      #   uses: ./tools/UnitTestApp/ChangeFunctionVisibility
      #   with:
      #     osType: ${{ matrix.os }}

      # - name: Install packages
      #   run:  yarn --cwd ./tools/UnitTestApp && yarn --cwd ./repo1 && yarn --cwd ./repo1/packages/react-charting

      # - name: Build
      #   run:  yarn --cwd ./repo1 buildto @fluentui/react-charting

      # - name: Run the tests
      #   run: |
      #     if ${{ matrix.os }} == 'windows-latest'
      #     then
      #       cd ./repo1/packages/react-charting && powershell -Command "(Get-Content -Path ./config/tests.js) -replace 'PROD', 'TEST' | Set-Content -Path ./config/tests.js" && yarn test --coverage
      #     elif ${{ matrix.os }} == 'macos-latest'
      #       cd ./repo1/packages/react-charting && sed -i '' 's/PROD/TEST/g' ./config/tests.js && yarn test --coverage --coverageReporters=html --verbose
      #     elif ${{ matrix.os }} == 'ubuntu-latest'
      #       cd ./repo1/packages/react-charting && sed -i 's/PROD/TEST/g' ./config/tests.js && yarn test --coverage --coverageReporters=html --verbose
      #     fi

      # - name: Generate coverage file name
      #   run: |
      #     if ${{ matrix.os }} == 'windows-latest'
      #     then
      #       $NOW=& Get-Date -format yyyy-MM-dd
      #       echo "NOW=$NOW" >> $env:GITHUB_ENV
      #       echo "COVERAGE_FILENAME=test_coverage_${{ matrix.os }}_${{ env.NOW }}" >> $env:GITHUB_ENV
      #     else
      #       echo "COVERAGE_FILENAME=test_coverage_${{ matrix.os }}_$(date +'%Y-%m-%d_%H-%M-%S')" >> $GITHUB_ENV

      # - name: Save coverage file
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: ${{env.COVERAGE_FILENAME}}
      #     path: ./repo1/packages/react-charting/coverage
